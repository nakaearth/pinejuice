version: 2.1
orbs:
  slack: circleci/slack@4

executors:
  backend-ruby-executor:
    docker:
      - image: circleci/ruby:2.7.5

  backend-rails-executor:
    docker:
      - image: circleci/ruby:2.7.5
        environment:
          RAILS_ENV: test
          DB_SERVERNAME: 127.0.0.1
      - image: circleci/mysql:8.0
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'
          MYSQL_ROOT_HOST: '%'
          MYSQL_ROOT_PASSWORD: ''

commands:
  install_ruby_dependencies:
    steps:
      - restore_cache:
          name: Restore gem cache
          keys:
            - pinejuice-gem-bundle-{{ checksum "Gemfile.lock" }}
      - run:
          name: gem install bundler
          command: gem install bundler:2.2.2
      - run:
          name: bundle install
          command: bundle install --path vendor/bundle --jobs=4 --retry=3
      # - run:
      #     name: bundle clean
      #     command: bundle clean
      - save_cache:
          name: save gem cache
          key: pinejuice-gem-bundle-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
  set_test_environment_file:
    steps:
      - run:
          name: create test environment file
          command: cp .env.sample .env.test
  db_migrate:
    steps:
      - run:
          name: libffi add symbol
          command: |
            sudo ln -s /usr/lib/x86_64-linux-gnu/libffi.so.7.1.0 /usr/lib/x86_64-linux-gnu/libffi.so.6
      - run:
          name: db migrate
          command: bundle exec rails db:create db:migrate
  wait_mysql_up:
    steps:
      - run:
          name: Wait for mysql up
          command: dockerize -wait tcp://127.0.0.1:3306 -timeout 1m -wait-retry-interval 5s

jobs:
  backend_bundle_install:
    executor: backend-ruby-executor
    steps:
      - checkout
      - install_ruby_dependencies

  backend_test:
    parallelism: 4
    executor: backend-rails-executor
    steps:
      - checkout
      - install_ruby_dependencies
      - set_test_environment_file
      - wait_mysql_up
      - db_migrate
      - run: mkdir test-results
      - run:
          name: Run test
          command: |
            bundle exec rspec -t ci --profile 10
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: coverage
      - run:
          name: Stash Coverage Results
          command: |
            mkdir -p backend_coverage
            cp -R coverage/.resultset.json backend_coverage/.resultset-${CIRCLE_NODE_INDEX}.json
            #      - persist_to_workspace:
            #          root: .
            #          paths:
                       # - backend_coverage

  backend_rubocop:
    executor: backend-ruby-executor
    steps:
      - checkout
      - install_ruby_dependencies
      - run:
          name: Run rubocop
          command: bundle exec rubocop app/ spec/ --parallel

  slack_notify:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*This is a text notification*",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: always
  deploy:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - run: echo "deploy my app"
      - slack/notify:
          event: fail
          mentions: '@s_nakamura'
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
workflows:
  build_and_test:
    jobs:
      - backend_bundle_install:
          filters:
            branches:
              ignore:
                - release

      - backend_test:
          requires:
            - backend_bundle_install
      - backend_rubocop:
          requires:
            - backend_bundle_install
      - slack_notify:
          requires:
            - backend_rubocop
            - backend_test
      - slack/on-hold:
          filters:
            tags:
              only: /^v.*/
          requires:
            - slack_notify
      - pause_workflow:
          filters:
            tags:
              only: /^v.*/
          requires:
            - slack/on-hold
          type: approval
      - deploy:
          filters:
            tags:
              only: /^v.*/
          requires:
            - pause_workflow